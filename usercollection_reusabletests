    function commonTest(callType, testname){

        if(callType.toUpperCase().trim() === "POST" ||callType.toUpperCase().trim() === "PUT"){

            let response;
            let requestBody;

            switch(testname.toLowerCase().trim()) {
            case "mandatory field values":
            //Validate all mandatory fields

                response = pm.response.json();
                requestBody = JSON.parse(pm.request.body);

                //user first name
                pm.test("User's first name matches in request body and response", function () {
                    pm.expect(response.user_first_name).to.eql(requestBody.user_first_name);
                });

                //user last name
                pm.test("User's last name matches in request body and response", function () {
                    pm.expect(response.user_last_name).to.eql(requestBody.user_last_name);
                });

                //user contact number
                pm.test("User's contact number matches in request body and response", function () {
                    pm.expect((response.user_contact_number).toString()).to.eql(requestBody.user_contact_number);
                });

                //user email
                pm.test("User's email matches in request body and response", function () {
                    pm.expect(response.user_email_id).to.eql(requestBody.user_email_id);
                });
            break;
            
            case "optional field values":
            //Validate Optional fields

                response = pm.response.json();
                requestBody = JSON.parse(pm.request.body);
                //plotNumber
                pm.test("plotNumber matches in request body and response", function () {
                    pm.expect(response.userAddress.plotNumber).to.eql(requestBody.userAddress.plotNumber);
                });

                //street
                pm.test("street matches in request body and response", function () {
                    pm.expect(response.userAddress.street).to.eql(requestBody.userAddress.street);
                });

                //state
                pm.test("state matches in request body and response", function () {
                    pm.expect(response.userAddress.state).to.eql(requestBody.userAddress.state);
                });

                //country
                pm.test("country matches in request body and response", function () {
                    pm.expect(response.userAddress.country).to.eql(requestBody.userAddress.country);
                });

                //zipCode
                pm.test("zipCode matches in request body and response", function () {
                    pm.expect((response.userAddress.zipCode).toString()).to.eql(requestBody.userAddress.zipCode);
                });
            break;

            case "mandatory field data type":
            //Validate mandatory data type

                response = pm.response.json();

                pm.test("Test data type of mandatory fields in the response", () => {
                    pm.expect(response).to.be.an("object");
                    pm.expect(response.user_id).to.be.a("number");
                    pm.expect(response.user_first_name).to.be.a("string");
                    pm.expect(response.user_last_name).to.be.a("string");
                    pm.expect(response.user_contact_number).to.be.a("number");
                    pm.expect(response.creation_time).to.be.a("string");
                    pm.expect(response.last_mod_time).to.be.a("string");

                    });
            break;
            
            case "optional field data type - populated":
            //Validate optional data type - when populated
            
                response = pm.response.json();


                pm.test("Test data type of optional fields in the response - populated", () => {
    
                pm.expect(response.userAddress.addressId).to.be.a("number");
                pm.expect(response.userAddress.plotNumber).to.be.a("string");
                pm.expect(response.userAddress.street).to.be.a("string");
                pm.expect(response.userAddress.state).to.be.a("string");
                pm.expect(response.userAddress.country).to.be.a("string");
                pm.expect(response.userAddress.zipCode).to.be.a("number");
                });
            break;

            case "optional field data type - unpopulated":
            //Validate optional data type - when unpopulated
            
                response = pm.response.json();

                pm.test("Test data type of optional fields in the response - unpopulated", () => {
                pm.expect(response.userAddress.addressId).to.be.a("number");
                pm.expect(response.userAddress.plotNumber).to.be.null;
                pm.expect(response.userAddress.street).to.be.null;
                pm.expect(response.userAddress.state).to.be.null;
                pm.expect(response.userAddress.country).to.be.null;
                pm.expect(response.userAddress.zipCode).to.be.null;
                });
            break;

            default:
                console.log("incorrect test name was passed")
            }  
        }
        else if(callType.toUpperCase().trim() === "ANY"){//common for all HTTP calls

            switch(testname.toLowerCase().trim()) {
            case "header":
            //header test
                pm.test("Content-Type header is present", () => {
                pm.response.to.have.header("Content-Type");
                });

                pm.test("Content-Type header is application/json", () => {
                pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');
                });

            break;
            case "response time":
            //test response time
                pm.test("Response time is less than 1000ms", () => {
                pm.expect(pm.response.responseTime).to.be.below(500);
                });
            break;
            default:
                console.log("incorrect test name was passed")
            }
        }
        
    }
  

module.exports = {
    commonTest
}


